name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      prerelease:
        description: 'Create a pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  version-bump:
    name: Version Bump and Tag
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog_content: ${{ steps.changelog.outputs.content }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install packaging python-semantic-release

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
        print(data['project']['version'])
        ")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Calculate new version
      id: version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
        VERSION_TYPE="${{ github.event.inputs.version_type }}"
        
        python << EOF
        from packaging import version
        import sys
        
        current = version.parse("$CURRENT_VERSION")
        
        if "$VERSION_TYPE" == "major":
            new_version = f"{current.major + 1}.0.0"
        elif "$VERSION_TYPE" == "minor":
            new_version = f"{current.major}.{current.minor + 1}.0"
        elif "$VERSION_TYPE" == "patch":
            new_version = f"{current.major}.{current.minor}.{current.micro + 1}"
        else:
            print(f"Invalid version type: $VERSION_TYPE", file=sys.stderr)
            sys.exit(1)
        
        print(f"new_version={new_version}")
        
        # Write to GitHub outputs
        with open("$GITHUB_OUTPUT", "a") as f:
            f.write(f"new_version={new_version}\n")
        EOF

    - name: Update version in pyproject.toml
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
        echo "Updated pyproject.toml to version $NEW_VERSION"

    - name: Extract changelog content for version
      id: changelog
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        # Extract changelog content for the current version
        python << 'EOF'
        import re
        import sys
        
        try:
            with open('CHANGELOG.md', 'r') as f:
                content = f.read()
            
            # Find the section for the current version (unreleased changes)
            # Look for the first version section after the current one
            pattern = r'^## \[(.*?)\] - (\d{4}-\d{2}-\d{2})'
            matches = list(re.finditer(pattern, content, re.MULTILINE))
            
            if matches:
                # Get content from start of first version section to start of next
                start_pos = matches[0].start()
                if len(matches) > 1:
                    end_pos = matches[1].start()
                    changelog_section = content[start_pos:end_pos].strip()
                else:
                    changelog_section = content[start_pos:].strip()
                
                # Clean up the section - remove the header line
                lines = changelog_section.split('\n')
                if lines and lines[0].startswith('## ['):
                    lines = lines[1:]  # Remove version header
                
                # Join back and clean up
                changelog_content = '\n'.join(lines).strip()
                
                # Escape newlines for GitHub output
                changelog_content = changelog_content.replace('\n', '\\n').replace('\r', '\\r')
                
                with open("$GITHUB_OUTPUT", "a") as f:
                    f.write(f"content={changelog_content}\n")
                    
                print("Extracted changelog content successfully")
            else:
                print("No changelog sections found")
                with open("$GITHUB_OUTPUT", "a") as f:
                    f.write("content=No changelog content available\n")
                    
        except Exception as e:
            print(f"Error extracting changelog: {e}", file=sys.stderr)
            with open("$GITHUB_OUTPUT", "a") as f:
                f.write("content=Error extracting changelog content\n")
        EOF

    - name: Update changelog with new version
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        CURRENT_DATE=$(date +%Y-%m-%d)
        
        # Update the first unreleased version with the new version number and date
        sed -i "0,/^## \[.*\] - [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/s//## [$NEW_VERSION] - $CURRENT_DATE/" CHANGELOG.md
        
        echo "Updated CHANGELOG.md with version $NEW_VERSION and date $CURRENT_DATE"

    - name: Commit version bump
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        git add pyproject.toml CHANGELOG.md
        git commit -m "chore: bump version to $NEW_VERSION

        ü§ñ Generated with [Claude Code](https://claude.ai/code)

        Co-Authored-By: Claude <noreply@anthropic.com>"
        
        # Create and push tag
        git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
        git push origin main
        git push origin "v$NEW_VERSION"

  build-and-release:
    name: Build and Create Release
    runs-on: ubuntu-latest
    needs: version-bump
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: v${{ needs.version-bump.outputs.new_version }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build Python package
      run: |
        python -m build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:v${{ needs.version-bump.outputs.new_version }}
          ghcr.io/${{ github.repository }}:latest
        labels: |
          org.opencontainers.image.title=nBedR
          org.opencontainers.image.description=RAG Embedding Toolkit
          org.opencontainers.image.version=v${{ needs.version-bump.outputs.new_version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.version-bump.outputs.new_version }}
        name: Release v${{ needs.version-bump.outputs.new_version }}
        body: |
          ## üöÄ Release v${{ needs.version-bump.outputs.new_version }}
          
          ### üìã Changelog
          
          ${{ needs.version-bump.outputs.changelog_content }}
          
          ### üì¶ Installation
          
          **PyPI Package:**
          ```bash
          pip install nbedr==${{ needs.version-bump.outputs.new_version }}
          ```
          
          **Docker Container:**
          ```bash
          docker pull ghcr.io/${{ github.repository }}:v${{ needs.version-bump.outputs.new_version }}
          ```
          
          ### üîó Links
          - üìñ [Documentation](https://github.com/${{ github.repository }}/blob/v${{ needs.version-bump.outputs.new_version }}/README.md)
          - üêõ [Report Issues](https://github.com/${{ github.repository }}/issues)
          - üí¨ [Discussions](https://github.com/${{ github.repository }}/discussions)
          
          ---
          
          ü§ñ Generated with [Claude Code](https://claude.ai/code)
        files: |
          dist/*
        draft: ${{ github.event.inputs.draft }}
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: false

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [version-bump, build-and-release]
    if: ${{ !github.event.inputs.draft && !github.event.inputs.prerelease }}
    environment: pypi

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: v${{ needs.version-bump.outputs.new_version }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [version-bump, build-and-release, publish-pypi]
    if: always() && needs.build-and-release.result == 'success'

    steps:
    - name: Success notification
      run: |
        echo "üéâ Release v${{ needs.version-bump.outputs.new_version }} completed successfully!"
        echo "üì¶ Python package: Available on PyPI"
        echo "üê≥ Docker image: ghcr.io/${{ github.repository }}:v${{ needs.version-bump.outputs.new_version }}"
        echo "üìã Release notes: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.version-bump.outputs.new_version }}"