name: Publish Wiki Documentation

on:
  # Manual triggering only
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all wiki pages'
        required: false
        default: false
        type: boolean
      update_reason:
        description: 'Reason for manual wiki update'
        required: false
        default: 'Manual documentation update'
        type: string
  
  # Trigger after successful release workflow
  workflow_run:
    workflows: ["Release"]
    types: [completed]
    branches: [main]

env:
  PYTHON_VERSION: '3.11'

jobs:
  check-trigger:
    name: Determine Wiki Update Trigger
    runs-on: ubuntu-latest
    outputs:
      should_update: ${{ steps.check.outputs.should_update }}
      update_reason: ${{ steps.check.outputs.update_reason }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Determine update trigger
      id: check
      run: |
        echo "🔍 Checking wiki update trigger..."
        
        # Manual trigger
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should_update=true" >> $GITHUB_OUTPUT
          if [[ "${{ github.event.inputs.force_update }}" == "true" ]]; then
            echo "update_reason=Manual force update: ${{ github.event.inputs.update_reason }}" >> $GITHUB_OUTPUT
            echo "📝 Manual force update requested"
          else
            echo "update_reason=Manual update: ${{ github.event.inputs.update_reason }}" >> $GITHUB_OUTPUT
            echo "📝 Manual update requested"
          fi
          exit 0
        fi
        
        # Workflow run (after release)
        if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          # Only proceed if the triggering workflow was successful
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "should_update=true" >> $GITHUB_OUTPUT
            echo "update_reason=Post-release documentation update" >> $GITHUB_OUTPUT
            echo "📝 Successful release workflow detected - updating wiki"
          else
            echo "should_update=false" >> $GITHUB_OUTPUT
            echo "update_reason=Release workflow failed - skipping wiki update" >> $GITHUB_OUTPUT
            echo "❌ Release workflow failed - skipping wiki update"
          fi
          exit 0
        fi
        
        # Default: no update
        echo "should_update=false" >> $GITHUB_OUTPUT
        echo "update_reason=No qualifying trigger detected" >> $GITHUB_OUTPUT
        echo "📄 No qualifying trigger for wiki update"

  generate-wiki:
    name: Generate Wiki Content
    runs-on: ubuntu-latest
    needs: check-trigger
    if: needs.check-trigger.outputs.should_update == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
    
    - name: Generate wiki content
      run: |
        echo "🔧 Generating wiki content..."
        echo "📝 Update reason: ${{ needs.check-trigger.outputs.update_reason }}"
        
        # Use force flag for manual force updates
        if [[ "${{ github.event.inputs.force_update }}" == "true" ]]; then
          echo "🔄 Force regenerating all wiki pages..."
          python scripts/generate-wiki.py --repo-root . --config wiki-config.yaml --force
        else
          echo "📄 Generating wiki with change detection..."
          python scripts/generate-wiki.py --repo-root . --config wiki-config.yaml
        fi
        
        echo "📋 Generated wiki files:"
        ls -la wiki/
    
    - name: Upload wiki content as artifact
      uses: actions/upload-artifact@v4
      with:
        name: wiki-content
        path: wiki/
        retention-days: 30

  publish-wiki:
    name: Publish to GitHub Wiki
    runs-on: ubuntu-latest
    needs: [check-trigger, generate-wiki]
    if: needs.check-trigger.outputs.should_update == 'true'
    
    permissions:
      contents: write  # Required for wiki access
    
    steps:
    - name: Download wiki content
      uses: actions/download-artifact@v4
      with:
        name: wiki-content
        path: wiki-content/
    
    - name: Clone wiki repository
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get repository info
        REPO_OWNER="${{ github.repository_owner }}"
        REPO_NAME="${{ github.event.repository.name }}"
        WIKI_URL="https://github.com/${REPO_OWNER}/${REPO_NAME}.wiki.git"
        
        echo "📡 Cloning wiki repository: $WIKI_URL"
        
        # Configure git
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        # Clone wiki repository
        git clone "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO_OWNER}/${REPO_NAME}.wiki.git" wiki-repo
        
        # If wiki doesn't exist yet, create it
        if [ ! -d "wiki-repo" ]; then
          echo "📝 Creating new wiki repository"
          mkdir wiki-repo
          cd wiki-repo
          git init
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO_OWNER}/${REPO_NAME}.wiki.git"
          
          # Create initial Home page if it doesn't exist
          echo "# Welcome to the Wiki" > Home.md
          git add Home.md
          git commit -m "Initialize wiki"
          git branch -M main
          git push -u origin main
          cd ..
        fi
    
    - name: Update wiki pages
      run: |
        echo "🔄 Updating wiki pages..."
        
        cd wiki-repo
        
        # Remove all existing .md files except .git
        find . -name "*.md" -type f -delete
        
        # Copy new content
        cp -r ../wiki-content/* .
        
        # Check if there are actually changes
        if git diff --quiet && git diff --cached --quiet; then
          echo "📄 No changes to commit"
          exit 0
        fi
        
        # Add all changes
        git add .
        
        # Create commit message based on trigger
        if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          COMMIT_MSG="📖 Update documentation after successful release"
        elif [[ "${{ github.event.inputs.force_update }}" == "true" ]]; then
          COMMIT_MSG="📖 ${{ needs.check-trigger.outputs.update_reason }}"
        else
          COMMIT_MSG="📖 ${{ needs.check-trigger.outputs.update_reason }}"
        fi
        
        echo "💾 Committing changes: $COMMIT_MSG"
        git commit -m "$COMMIT_MSG

        🤖 Generated with [Claude Code](https://claude.ai/code)
        
        Co-Authored-By: Claude <noreply@anthropic.com>"
        
        # Push changes (GitHub wikis use master branch)
        echo "🚀 Pushing to wiki..."
        git push origin master
        
        echo "✅ Wiki updated successfully!"
    
    - name: Create deployment summary
      if: always()
      run: |
        echo "## 📖 Wiki Publication Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Wiki URL | https://github.com/${{ github.repository }}/wiki |" >> $GITHUB_STEP_SUMMARY
        echo "| Trigger | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Reason | ${{ needs.check-trigger.outputs.update_reason }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Force Update | ${{ github.event.inputs.force_update || 'false' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ job.status }}" == "success" ]]; then
          echo "| Status | ✅ Successfully published |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Status | ❌ Publication failed |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📚 Published Pages" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "wiki-content" ]; then
          for file in wiki-content/*.md; do
            if [ -f "$file" ]; then
              basename "$file" .md >> $GITHUB_STEP_SUMMARY
            fi
          done
        fi

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [generate-wiki, publish-wiki]
    if: failure()
    
    steps:
    - name: Create failure issue
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const title = `Wiki Publication Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## 📖 Wiki Publication Failure
          
          The automated wiki publication workflow has failed.
          
          **Details:**
          - **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - **Commit**: ${{ github.sha }}
          - **Trigger**: ${{ github.event_name }}
          - **Branch**: ${{ github.ref_name }}
          
          **Next Steps:**
          1. Check the workflow logs for detailed error information
          2. Verify wiki repository permissions
          3. Manually run the wiki generator: \`python scripts/generate-wiki.py\`
          4. Re-run the failed workflow after fixing issues
          
          This issue was created automatically by the wiki publication workflow.
          `;
          
          // Check if a similar issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['wiki', 'automation', 'bug']
          });
          
          const existingIssue = issues.data.find(issue => 
            issue.title.includes('Wiki Publication Failed') && 
            issue.created_at > new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
          );
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['wiki', 'automation', 'bug']
            });
          }